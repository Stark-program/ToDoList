[{"C:\\Coding\\Projects\\ToDoList-second\\ToDoList\\src\\index.js":"1","C:\\Coding\\Projects\\ToDoList-second\\ToDoList\\src\\reportWebVitals.js":"2","C:\\Coding\\Projects\\ToDoList-second\\ToDoList\\src\\app\\App.js":"3"},{"size":521,"mtime":1610066026590,"results":"4","hashOfConfig":"5"},{"size":375,"mtime":1610066026592,"results":"6","hashOfConfig":"5"},{"size":5505,"mtime":1610591695539,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ffrqj1",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Coding\\Projects\\ToDoList-second\\ToDoList\\src\\index.js",[],["15","16"],"C:\\Coding\\Projects\\ToDoList-second\\ToDoList\\src\\reportWebVitals.js",[],"C:\\Coding\\Projects\\ToDoList-second\\ToDoList\\src\\app\\App.js",["17","18","19"],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":22,"column":9,"nodeType":"26","endLine":30,"endColumn":4,"suggestions":"27"},{"ruleId":"28","severity":1,"message":"29","line":46,"column":9,"nodeType":"30","messageId":"31","endLine":46,"endColumn":23},{"ruleId":"24","severity":1,"message":"32","line":91,"column":9,"nodeType":"26","endLine":94,"endColumn":4},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"react-hooks/exhaustive-deps","The 'handleClick' function makes the dependencies of useEffect Hook (at line 106) change on every render. To fix this, wrap the definition of 'handleClick' in its own useCallback() Hook.","VariableDeclarator",["35"],"no-unused-vars","'removeItemList' is assigned a value but never used.","Identifier","unusedVar","The 'handleInputReset' function makes the dependencies of useEffect Hook (at line 118) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'handleInputReset' in its own useCallback() Hook.","no-global-assign","no-unsafe-negation",{"desc":"36","fix":"37"},"Wrap the definition of 'handleClick' in its own useCallback() Hook.",{"range":"38","text":"39"},[818,1000],"useCallback(() => {\r\n    var completed = false;\r\n    const newToDo = list.concat({\r\n      task,\r\n      completed,\r\n      _id: (Math.random() + 1).toFixed(2),\r\n    });\r\n    setList(newToDo);\r\n  })"]